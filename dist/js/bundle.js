(()=>{"use strict";var __webpack_modules__={577:()=>{eval("\n;// CONCATENATED MODULE: ./node_modules/typeit/dist/index.es.js\n// TypeIt by Alex MacArthur - https://typeitjs.com\nvar isArray = (thing) => Array.isArray(thing);\nvar asArray = (value) => {\n  return isArray(value) ? value : [value];\n};\nconst Queue = function(initialItems) {\n  const add = function(steps) {\n    _queue = _queue.concat(asArray(steps));\n    return this;\n  };\n  const set = function(index, item) {\n    _queue[index] = item;\n  };\n  const reset = function() {\n    _queue = _queue.map((item) => {\n      delete item.done;\n      return item;\n    });\n  };\n  const getItems = () => _queue.filter((i) => !i.done);\n  const markDone = (index) => {\n    _queue[index].done = true;\n  };\n  let _queue = [];\n  add(initialItems);\n  return {\n    add,\n    set,\n    reset,\n    getItems,\n    markDone\n  };\n};\nvar toArray = (val) => {\n  return Array.from(val);\n};\nvar createTextNode = (content) => {\n  return document.createTextNode(content);\n};\nconst expandTextNodes = (element) => {\n  [...element.childNodes].forEach((child) => {\n    if (child.nodeValue) {\n      [...child.nodeValue].forEach((c) => {\n        child.parentNode.insertBefore(createTextNode(c), child);\n      });\n      child.remove();\n      return;\n    }\n    expandTextNodes(child);\n  });\n  return element;\n};\nvar getParsedBody = (content) => {\n  let doc = document.implementation.createHTMLDocument();\n  doc.body.innerHTML = content;\n  return expandTextNodes(doc.body);\n};\nconst DATA_ATTRIBUTE = \"data-typeit-id\";\nconst CURSOR_CLASS = \"ti-cursor\";\nconst START = \"START\";\nconst END = \"END\";\nconst DEFAULT_STATUSES = {\n  started: false,\n  completed: false,\n  frozen: false,\n  destroyed: false\n};\nconst DEFAULT_OPTIONS = {\n  breakLines: true,\n  cursor: true,\n  cursorChar: \"|\",\n  cursorSpeed: 1e3,\n  deleteSpeed: null,\n  html: true,\n  lifeLike: true,\n  loop: false,\n  loopDelay: 750,\n  nextStringDelay: 750,\n  speed: 100,\n  startDelay: 250,\n  startDelete: false,\n  strings: [],\n  waitUntilVisible: false,\n  beforeString: () => {\n  },\n  afterString: () => {\n  },\n  beforeStep: () => {\n  },\n  afterStep: () => {\n  },\n  afterComplete: () => {\n  }\n};\nfunction walkElementNodes(element, shouldReverse = false) {\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ALL, {\n    acceptNode: (node) => {\n      var _a;\n      return ((_a = node == null ? void 0 : node.classList) == null ? void 0 : _a.contains(CURSOR_CLASS)) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n    }\n  });\n  let nextNode;\n  let nodes = [];\n  while (nextNode = walker.nextNode()) {\n    nextNode.originalParent = nextNode.parentNode;\n    nodes.push(nextNode);\n  }\n  return shouldReverse ? nodes.reverse() : nodes;\n}\nfunction chunkStringAsHtml(string) {\n  return walkElementNodes(getParsedBody(string));\n}\nfunction maybeChunkStringAsHtml(str, asHtml = true) {\n  return asHtml ? chunkStringAsHtml(str) : toArray(str).map(createTextNode);\n}\nvar createElement = (el) => {\n  return document.createElement(el);\n};\nvar appendStyleBlock = (styles, id = \"\") => {\n  let styleBlock = createElement(\"style\");\n  styleBlock.id = id;\n  styleBlock.appendChild(createTextNode(styles));\n  document.head.appendChild(styleBlock);\n};\nconst isNumber = (value) => {\n  return Number.isInteger(value);\n};\nconst index_es_select = (selector, element = document, all = false) => {\n  return element[`querySelector${all ? \"All\" : \"\"}`](selector);\n};\nvar isInput = (el) => {\n  return \"value\" in el;\n};\nconst getAllChars = (element) => {\n  if (isInput(element)) {\n    return toArray(element.value);\n  }\n  return walkElementNodes(element, true).filter((c) => !(c.childNodes.length > 0));\n};\nconst calculateStepsToSelector = (selector, element, to = START) => {\n  let isMovingToLast = new RegExp(END, \"i\").test(to);\n  let selectedElement = selector ? index_es_select(selector, element) : element;\n  let selectedElementNodes = walkElementNodes(selectedElement, true);\n  let selectedElementFirstChild = selectedElementNodes[0];\n  let selectedElementLastChild = selectedElementNodes[selectedElementNodes.length - 1];\n  let isMovingToEndOfRootElement = isMovingToLast && !selector;\n  let childIndex = isMovingToEndOfRootElement ? 0 : getAllChars(element).findIndex((character) => {\n    return character.isSameNode(isMovingToLast ? selectedElementFirstChild : selectedElementLastChild);\n  });\n  if (isMovingToLast)\n    childIndex--;\n  return childIndex + 1;\n};\nvar calculateCursorSteps = ({\n  el,\n  move,\n  cursorPos,\n  to\n}) => {\n  if (isNumber(move)) {\n    return move * -1;\n  }\n  let childIndex = calculateStepsToSelector(move, el, to);\n  return childIndex - cursorPos;\n};\nvar calculateDelay = (delayArg) => {\n  if (!isArray(delayArg)) {\n    delayArg = [delayArg / 2, delayArg / 2];\n  }\n  return delayArg;\n};\nvar randomInRange = (value, range2) => {\n  return Math.abs(Math.random() * (value + range2 - (value - range2)) + (value - range2));\n};\nlet range = (val) => val / 2;\nfunction calculatePace(options) {\n  let { speed, deleteSpeed, lifeLike } = options;\n  deleteSpeed = deleteSpeed !== null ? deleteSpeed : speed / 3;\n  return lifeLike ? [\n    randomInRange(speed, range(speed)),\n    randomInRange(deleteSpeed, range(deleteSpeed))\n  ] : [speed, deleteSpeed];\n}\nvar destroyTimeouts = (timeouts) => {\n  timeouts.forEach((timeout) => clearTimeout(timeout));\n  return [];\n};\nvar generateHash = () => {\n  return Math.random().toString().substring(2, 9);\n};\nvar fireWhenVisible = (element, func) => {\n  let observer = new IntersectionObserver((entries, observer2) => {\n    entries.forEach((entry) => {\n      if (entry.isIntersecting) {\n        func();\n        observer2.unobserve(element);\n      }\n    });\n  }, { threshold: 1 });\n  observer.observe(element);\n};\nconst handleFunctionalArg = (arg) => {\n  return typeof arg === \"function\" ? arg() : arg;\n};\nconst isBodyElement = (node) => (node == null ? void 0 : node.tagName) === \"BODY\";\nconst insertIntoElement = (originalTarget, character) => {\n  if (isInput(originalTarget)) {\n    originalTarget.value = `${originalTarget.value}${character.textContent}`;\n    return;\n  }\n  character.innerHTML = \"\";\n  let target = isBodyElement(character.originalParent) ? originalTarget : character.originalParent || originalTarget;\n  target.insertBefore(character, index_es_select(\".\" + CURSOR_CLASS, target) || null);\n};\nconst updateCursorPosition = (steps, cursorPosition, printedCharacters) => {\n  return Math.min(Math.max(cursorPosition + steps, 0), printedCharacters.length);\n};\nvar merge = (originalObj, newObj) => {\n  return Object.assign({}, originalObj, newObj);\n};\nvar removeNode = (node) => {\n  if (!node)\n    return;\n  const nodeParent = node.parentNode;\n  const nodeToRemove = nodeParent.childNodes.length > 1 ? node : nodeParent;\n  nodeToRemove.remove();\n};\nvar repositionCursor = (element, allChars, newCursorPosition) => {\n  let nodeToInsertBefore = allChars[newCursorPosition - 1];\n  let cursor = index_es_select(`.${CURSOR_CLASS}`, element);\n  element = (nodeToInsertBefore == null ? void 0 : nodeToInsertBefore.parentNode) || element;\n  element.insertBefore(cursor, nodeToInsertBefore || null);\n};\nfunction selectorToElement(thing) {\n  return typeof thing === \"string\" ? index_es_select(thing) : thing;\n}\nconst isNonVoidElement = (el) => /<(.+)>(.*?)<\\/(.+)>/.test(el.outerHTML);\nconst wait = async (callback, delay, timeouts) => {\n  return new Promise((resolve) => {\n    const cb = async () => {\n      await callback();\n      resolve();\n    };\n    timeouts.push(setTimeout(cb, delay));\n  });\n};\nconst cursorFontStyles = {\n  \"font-family\": \"\",\n  \"font-weight\": \"\",\n  \"font-size\": \"\",\n  \"font-style\": \"\",\n  \"line-height\": \"\",\n  color: \"\",\n  \"margin-left\": \"-.125em\",\n  \"margin-right\": \".125em\"\n};\nconst setCursorStyles = (id, options, element) => {\n  let rootSelector = `[${DATA_ATTRIBUTE}='${id}']`;\n  let cursorSelector = `${rootSelector} .${CURSOR_CLASS}`;\n  let computedStyles = getComputedStyle(element);\n  let customProperties = Object.entries(cursorFontStyles).reduce((accumulator, [item, value]) => {\n    return `${accumulator} ${item}: var(--ti-cursor-${item}, ${value || computedStyles[item]});`;\n  }, \"\");\n  appendStyleBlock(`@keyframes blink-${id} { 0% {opacity: 0} 49% {opacity: 0} 50% {opacity: 1} } ${cursorSelector} { display: inline; letter-spacing: -1em; ${customProperties} animation: blink-${id} ${options.cursorSpeed / 1e3}s infinite; } ${cursorSelector}.with-delay { animation-delay: 500ms; } ${cursorSelector}.disabled { animation: none; }`, id);\n};\nfunction TypeIt(element, options = {}) {\n  const _wait = async (callback, delay, silent = false) => {\n    if (_statuses.frozen) {\n      await new Promise((resolve) => {\n        this.unfreeze = () => {\n          _statuses.frozen = false;\n          resolve();\n        };\n      });\n    }\n    silent || await _opts.beforeStep(this);\n    await wait(callback, delay, _timeouts);\n    silent || await _opts.afterStep(this);\n  };\n  const _elementIsInput = () => isInput(_element);\n  const _getPace = (index) => calculatePace(_opts)[index];\n  const _getAllChars = () => getAllChars(_element);\n  const _getActionPace = (instant, paceIndex = 0) => {\n    return instant ? _getPace(paceIndex) : 0;\n  };\n  const _maybeAppendPause = (opts = {}) => {\n    let delay = opts[\"delay\"];\n    delay && _queue.add(() => _pause(delay));\n  };\n  const _queueAndReturn = (steps, opts) => {\n    _queue.add(steps);\n    _maybeAppendPause(opts);\n    return this;\n  };\n  const _generateTemporaryOptionQueueItems = (newOptions = {}) => {\n    return [\n      () => _options(newOptions),\n      () => _options(_opts)\n    ];\n  };\n  const _addSplitPause = (items) => {\n    let delay = _opts.nextStringDelay;\n    _queue.add([\n      () => _pause(delay[0]),\n      ...items,\n      () => _pause(delay[1])\n    ]);\n  };\n  const _setUpCursor = () => {\n    if (_elementIsInput()) {\n      return;\n    }\n    let cursor = createElement(\"span\");\n    cursor.className = CURSOR_CLASS;\n    if (!_shouldRenderCursor) {\n      cursor.style.visibility = \"hidden\";\n      return cursor;\n    }\n    cursor.innerHTML = getParsedBody(_opts.cursorChar).innerHTML;\n    return cursor;\n  };\n  const _attachCursor = async () => {\n    !_elementIsInput() && _element.appendChild(_cursor);\n    _shouldRenderCursor && setCursorStyles(_id, _opts, _element);\n  };\n  const _disableCursorBlink = (shouldDisable) => {\n    if (_shouldRenderCursor) {\n      _cursor.classList.toggle(\"disabled\", shouldDisable);\n      _cursor.classList.toggle(\"with-delay\", !shouldDisable);\n    }\n  };\n  const _generateQueue = () => {\n    let strings = _opts.strings.filter((string) => !!string);\n    strings.forEach((string, index) => {\n      let chars = maybeChunkStringAsHtml(string, _opts.html);\n      _queue.add(() => _type({ chars }));\n      if (index + 1 === strings.length) {\n        return;\n      }\n      const splitPauseArgs = [\n        _opts.breakLines ? () => _type({\n          chars: [createElement(\"BR\")],\n          silent: true\n        }) : () => _delete({ num: chars.length })\n      ];\n      _addSplitPause(splitPauseArgs);\n    });\n  };\n  const _prepLoop = async (delay) => {\n    _cursorPosition && await _move({ value: _cursorPosition });\n    _queue.reset();\n    _queue.set(0, () => _pause(delay));\n    await _delete({ num: null });\n  };\n  const _maybePrependHardcodedStrings = (strings) => {\n    let existingMarkup = _element.innerHTML;\n    if (!existingMarkup) {\n      return strings;\n    }\n    _element.innerHTML = \"\";\n    if (_opts.startDelete) {\n      _element.innerHTML = existingMarkup;\n      expandTextNodes(_element);\n      _addSplitPause([\n        () => _delete({ num: null })\n      ]);\n      return strings;\n    }\n    let hardCodedStrings = existingMarkup.trim().split(/<br(?:\\s*?)(?:\\/)?>/);\n    return hardCodedStrings.concat(strings);\n  };\n  const _fire = async () => {\n    _statuses.started = true;\n    let queueItems = _queue.getItems();\n    try {\n      for (let i = 0; i < queueItems.length; i++) {\n        await queueItems[i]();\n        _queue.markDone(i);\n        _disableCursorBlink(false);\n      }\n      _statuses.completed = true;\n      await _opts.afterComplete(this);\n      if (!_opts.loop) {\n        throw \"\";\n      }\n      let delay = _opts.loopDelay;\n      _wait(async () => {\n        await _prepLoop(delay[0]);\n        _fire();\n      }, delay[1]);\n    } catch (e) {\n    }\n    return this;\n  };\n  const _pause = (time = 0) => {\n    return _wait(() => {\n    }, time);\n  };\n  const _move = async ({\n    value,\n    to = START,\n    instant = false\n  }) => {\n    _disableCursorBlink(true);\n    let numberOfSteps = calculateCursorSteps({\n      el: _element,\n      move: value,\n      cursorPos: _cursorPosition,\n      to\n    });\n    let moveCursor = () => {\n      _cursorPosition = updateCursorPosition(numberOfSteps < 0 ? -1 : 1, _cursorPosition, _getAllChars());\n      repositionCursor(_element, _getAllChars(), _cursorPosition);\n    };\n    await _wait(async () => {\n      for (let i = 0; i < Math.abs(numberOfSteps); i++) {\n        instant ? moveCursor() : await _wait(moveCursor, _getPace(0));\n      }\n    }, _getActionPace(instant));\n  };\n  const _type = ({\n    chars,\n    silent = false,\n    instant = false\n  }) => {\n    _disableCursorBlink(true);\n    return _wait(async () => {\n      const insert = (character) => insertIntoElement(_element, character);\n      silent || await _opts.beforeString(chars, this);\n      for (let char of chars) {\n        instant || isNonVoidElement(char) ? insert(char) : await _wait(() => insert(char), _getPace(0));\n      }\n      silent || await _opts.afterString(chars, this);\n    }, _getActionPace(instant), true);\n  };\n  const _options = async (opts) => {\n    _opts = merge(_opts, opts);\n    return;\n  };\n  const _empty = async () => {\n    if (_elementIsInput()) {\n      _element.value = \"\";\n      return;\n    }\n    _getAllChars().forEach((n) => {\n      removeNode(n);\n    });\n    return;\n  };\n  const _delete = async ({\n    num = null,\n    instant = false,\n    to = START\n  }) => {\n    _disableCursorBlink(true);\n    await _wait(async () => {\n      let rounds = isNumber(num) || _elementIsInput() ? num : calculateCursorSteps({\n        el: _element,\n        move: num,\n        cursorPos: _cursorPosition,\n        to\n      });\n      const deleteIt = () => {\n        let allChars = _getAllChars();\n        if (!allChars.length)\n          return;\n        if (_elementIsInput()) {\n          _element.value = _element.value.slice(0, -1);\n        } else {\n          removeNode(allChars[_cursorPosition]);\n        }\n      };\n      for (let i = 0; i < rounds; i++) {\n        instant ? deleteIt() : await _wait(deleteIt, _getPace(1));\n      }\n    }, _getActionPace(instant, 1));\n    if (num === null && _getAllChars().length - 1 > 0) {\n      await _delete({ num: null });\n    }\n  };\n  this.break = function(actionOpts) {\n    return _queueAndReturn(() => _type({ chars: [createElement(\"BR\")], silent: true }), actionOpts);\n  };\n  this.delete = function(numCharacters = null, actionOpts = {}) {\n    numCharacters = handleFunctionalArg(numCharacters);\n    let bookEndQueueItems = _generateTemporaryOptionQueueItems(actionOpts);\n    let num = numCharacters;\n    let { instant, to } = actionOpts;\n    return _queueAndReturn([\n      bookEndQueueItems[0],\n      () => _delete({ num, instant, to }),\n      bookEndQueueItems[1]\n    ], actionOpts);\n  };\n  this.empty = function(actionOpts = {}) {\n    return _queueAndReturn(_empty, actionOpts);\n  };\n  this.exec = function(func, actionOpts) {\n    let bookEndQueueItems = _generateTemporaryOptionQueueItems(actionOpts);\n    return _queueAndReturn([bookEndQueueItems[0], func, bookEndQueueItems[1]], actionOpts);\n  };\n  this.move = function(movementArg, actionOpts = {}) {\n    movementArg = handleFunctionalArg(movementArg);\n    let bookEndQueueItems = _generateTemporaryOptionQueueItems(actionOpts);\n    let { instant, to } = actionOpts;\n    let moveArgs = {\n      value: movementArg === null ? \"\" : movementArg,\n      to,\n      instant\n    };\n    return _queueAndReturn([\n      bookEndQueueItems[0],\n      () => _move(moveArgs),\n      bookEndQueueItems[1]\n    ], actionOpts);\n  };\n  this.options = function(opts) {\n    opts = handleFunctionalArg(opts);\n    return _queueAndReturn(() => _options(opts), opts);\n  };\n  this.pause = function(milliseconds, actionOpts = {}) {\n    return _queueAndReturn(() => _pause(handleFunctionalArg(milliseconds)), actionOpts);\n  };\n  this.type = function(string, actionOpts = {}) {\n    string = handleFunctionalArg(string);\n    let bookEndQueueItems = _generateTemporaryOptionQueueItems(actionOpts);\n    let chars = maybeChunkStringAsHtml(string, _opts.html);\n    let { instant } = actionOpts;\n    let itemsToQueue = [\n      bookEndQueueItems[0],\n      () => _type({ chars, instant }),\n      bookEndQueueItems[1]\n    ];\n    return _queueAndReturn(itemsToQueue, actionOpts);\n  };\n  this.is = function(key) {\n    return _statuses[key];\n  };\n  this.destroy = function(shouldRemoveCursor = true) {\n    _timeouts = destroyTimeouts(_timeouts);\n    handleFunctionalArg(shouldRemoveCursor) && removeNode(_cursor);\n    _statuses.destroyed = true;\n  };\n  this.freeze = function() {\n    _statuses.frozen = true;\n  };\n  this.unfreeze = function() {\n  };\n  this.reset = function() {\n    !this.is(\"destroyed\") && this.destroy();\n    _queue.reset();\n    _cursorPosition = 0;\n    for (let property in _statuses) {\n      _statuses[property] = false;\n    }\n    _element[_elementIsInput() ? \"value\" : \"innerHTML\"] = \"\";\n    return this;\n  };\n  this.go = function() {\n    if (_statuses.started) {\n      return this;\n    }\n    _attachCursor();\n    if (!_opts.waitUntilVisible) {\n      _fire();\n      return this;\n    }\n    fireWhenVisible(_element, _fire.bind(this));\n    return this;\n  };\n  this.getQueue = () => _queue;\n  this.getOptions = () => _opts;\n  this.updateOptions = (options2) => _options(options2);\n  this.getElement = () => _element;\n  let _element = selectorToElement(element);\n  let _timeouts = [];\n  let _cursorPosition = 0;\n  let _statuses = merge({}, DEFAULT_STATUSES);\n  let _opts = merge(DEFAULT_OPTIONS, options);\n  _opts = merge(_opts, {\n    html: !_elementIsInput() && _opts.html,\n    nextStringDelay: calculateDelay(_opts.nextStringDelay),\n    loopDelay: calculateDelay(_opts.loopDelay)\n  });\n  let _id = generateHash();\n  let _queue = Queue([() => _pause(_opts.startDelay)]);\n  _element.dataset.typeitId = _id;\n  appendStyleBlock(`[${DATA_ATTRIBUTE}]:before {content: '.'; display: inline-block; width: 0; visibility: hidden;}`);\n  let _shouldRenderCursor = _opts.cursor && !_elementIsInput();\n  let _cursor = _setUpCursor();\n  _opts.strings = _maybePrependHardcodedStrings(asArray(_opts.strings));\n  if (_opts.strings.length) {\n    _generateQueue();\n  }\n}\n\n\n;// CONCATENATED MODULE: ./src/js/game-start.js\n\r\n\r\nfunction lock() {\r\n  const body = document.body;\r\n  body.style.setProperty('overflow', 'hidden');\r\n}\r\n\r\nfunction unlock() {\r\n  const body = document.body;\r\n  body.style.removeProperty('overflow');\r\n}\r\n\r\nfunction hideForm() {\r\n  const gameStart = document.querySelector('.game-start');\r\n  gameStart.classList.add('fade-out');\r\n}\r\n\r\nfunction typeNames() {\r\n  const inputs = document.querySelectorAll('.game-start__input');\r\n  const names = document.querySelectorAll('.versus__name');\r\n\r\n  names.forEach((name, index) => {\r\n    new TypeIt(name, {\r\n      speed: 150,\r\n      startDelay: 800 * (index + 1),\r\n      afterComplete: function (instance) {\r\n        instance.destroy();\r\n      }\r\n    })\r\n      .type(inputs[index].value)\r\n      .go();\r\n  });\r\n}\r\n\r\nfunction formSubmit() {\r\n  const form = document.querySelector('.form');\r\n  form.addEventListener('submit', (event) => {\r\n    event.preventDefault();\r\n\r\n    const inputs = document.querySelectorAll('.game-start__input');\r\n    let errors = 0;\r\n    inputs.forEach((input) => {\r\n      const value = input.value;\r\n\r\n      if (!/[^\\s\\d]/g.test(value)) {\r\n        errors++;\r\n        input.classList.add('error');\r\n      } else {\r\n        input.classList.remove('error');\r\n      }\r\n    });\r\n\r\n    if (!errors) {\r\n      hideForm();\r\n      unlock();\r\n      typeNames();\r\n    }\r\n  });\r\n}\r\n\r\n(() => {\r\n  lock();\r\n  formSubmit();\r\n})();\r\n\n;// CONCATENATED MODULE: ./src/js/game.js\nclass Move {\r\n  constructor(state = 'red') {\r\n    this.state = state;\r\n    this.count = 0;\r\n  }\r\n\r\n  next() {\r\n    if (this.isRed()) {\r\n      this.state = 'blue';\r\n    } else if (this.isBlue()) {\r\n      this.state = 'red';\r\n    }\r\n  }\r\n\r\n  isRed() {\r\n    return this.state === 'red';\r\n  }\r\n\r\n  isBlue() {\r\n    return this.state === 'blue';\r\n  }\r\n}\r\n\r\nclass Game {\r\n  constructor(state = 'red') {\r\n    this.rows = 3;\r\n    this.cols = 3;\r\n    this.move = new Move(state);\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.build();\r\n    this.underline();\r\n    this.triggers();\r\n  }\r\n\r\n  build() {\r\n    const game = document.querySelector('.game');\r\n\r\n    for (let row = 1, index = 1; row <= this.rows; ++row) {\r\n      for (let col = 1; col <= this.cols; ++col) {\r\n        game.insertAdjacentHTML(\r\n          'beforeend',\r\n          `\r\n          <button aria-label=\"Tic Tac Toe cell\" data-row=${row} data-col=\"${col}\"\r\n            data-index=\"${index}\" class=\"game__cell btn-reset\">\r\n          </button>\r\n          `\r\n        );\r\n        index++;\r\n      }\r\n    }\r\n  }\r\n\r\n  triggers() {\r\n    const cells = document.querySelectorAll('.game__cell');\r\n    cells.forEach((cell) => {\r\n      cell.addEventListener('click', () => {\r\n        this.fill(cell);\r\n        this.move.count++;\r\n        this.checkout();\r\n        this.move.next();\r\n        this.underline();\r\n      });\r\n    });\r\n\r\n    const newGameButton = document.querySelector('.controls__new-game');\r\n    const resetButton = document.querySelector('.controls__reset');\r\n\r\n    newGameButton.addEventListener('click', () => {\r\n      this.clear();\r\n    });\r\n\r\n    resetButton.addEventListener('click', () => {\r\n      this.clear();\r\n      this.reset();\r\n    });\r\n  }\r\n\r\n  fill(cell) {\r\n    if (this.move.isRed()) {\r\n      cell.insertAdjacentHTML('beforeend', `<div class=\"cross\"></div>`);\r\n    } else {\r\n      cell.insertAdjacentHTML('beforeend', `<div class=\"circle\"></div>`);\r\n    }\r\n    cell.setAttribute('disabled', 'true');\r\n  }\r\n\r\n  checkout() {\r\n    const winDescriptor = this.checkWin(this.move.state);\r\n    if (winDescriptor) {\r\n      const { direction, cell } = winDescriptor;\r\n\r\n      const game = document.querySelector('.game');\r\n      game.setAttribute('data-direction', direction);\r\n\r\n      if (direction === 'horizontal') {\r\n        const row = cell.getAttribute('data-row');\r\n        game.style.setProperty('--value', row);\r\n      } else if (direction === 'vertical') {\r\n        const col = cell.getAttribute('data-col');\r\n        game.style.setProperty('--value', col);\r\n      }\r\n\r\n      this.disable();\r\n      this.addWin(this.move.state);\r\n\r\n      // alert(`${this.move.state} is Win!`);\r\n    } else if (this.move.count === this.rows * this.cols) {\r\n      this.addWin(this.move.state);\r\n      this.move.next();\r\n      this.addWin(this.move.state);\r\n      this.move.next();\r\n\r\n      // alert('Draw!');\r\n      this.clear();\r\n    }\r\n  }\r\n\r\n  disable() {\r\n    const cells = document.querySelectorAll('.game__cell');\r\n    cells.forEach((cell) => cell.setAttribute('disabled', 'true'));\r\n  }\r\n\r\n  checkWin(state) {\r\n    for (let i = 1; i <= this.cols; ++i) {\r\n      // vertical\r\n      for (let j = 1, ind = i; j <= this.rows; ind += this.rows, ++j) {\r\n        const cell = document.querySelector(`.game__cell[data-index=\"${ind}\"]`);\r\n        const cellState = cell.querySelector(`.${state === 'red' ? 'cross' : 'circle'}`);\r\n\r\n        if (!cellState) {\r\n          break;\r\n        }\r\n\r\n        if (cellState && j === this.rows) {\r\n          return { direction: 'vertical', cell };\r\n        }\r\n      }\r\n\r\n      // horizontal\r\n      for (let j = 1; j <= this.rows; ++j) {\r\n        const index = Math.max(0, i - 1) * this.rows + j;\r\n        const cell = document.querySelector(`.game__cell[data-index=\"${index}\"]`);\r\n        const cellState = cell.querySelector(`.${state === 'red' ? 'cross' : 'circle'}`);\r\n\r\n        if (!cellState) {\r\n          break;\r\n        }\r\n\r\n        if (cellState && j === this.rows) {\r\n          return { direction: 'horizontal', cell };\r\n        }\r\n      }\r\n    }\r\n\r\n    // main diagonal\r\n    for (let j = 0, ind = 1; j < this.rows; ind += this.rows + 1, ++j) {\r\n      const cell = document.querySelector(`.game__cell[data-index=\"${ind}\"]`);\r\n      const cellState = cell.querySelector(`.${state === 'red' ? 'cross' : 'circle'}`);\r\n\r\n      if (!cellState) {\r\n        break;\r\n      }\r\n\r\n      if (cellState && j === this.rows - 1) {\r\n        return { direction: 'main', cell };\r\n      }\r\n    }\r\n\r\n    // lateral diagonal\r\n    for (let j = 0, ind = this.cols; j < this.rows; ind += this.cols - 1, ++j) {\r\n      const cell = document.querySelector(`.game__cell[data-index=\"${ind}\"]`);\r\n      const cellState = cell.querySelector(`.${state === 'red' ? 'cross' : 'circle'}`);\r\n\r\n      if (!cellState) {\r\n        break;\r\n      }\r\n\r\n      if (cellState && j === this.rows - 1) {\r\n        return { direction: 'lateral', cell };\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  clear() {\r\n    const game = document.querySelector('.game');\r\n    game.removeAttribute('data-direction');\r\n\r\n    const cells = document.querySelectorAll('.game__cell');\r\n\r\n    cells.forEach((cell) => {\r\n      const cellState = cell.children[0];\r\n\r\n      if (cellState) {\r\n        cellState.classList.add('hide');\r\n      }\r\n\r\n      setTimeout(() => {\r\n        cell.removeAttribute('disabled');\r\n        cell.innerHTML = '';\r\n      }, 500);\r\n    });\r\n\r\n    this.move = new Move(this.move.state);\r\n  }\r\n\r\n  reset() {\r\n    const marks = document.querySelectorAll(`.versus__mark`);\r\n    marks.forEach((mark) => mark.removeAttribute('data-wins'));\r\n  }\r\n\r\n  underline() {\r\n    const names = document.querySelectorAll('.versus__name');\r\n    names.forEach((name) => name.classList.remove('active'));\r\n\r\n    const activeName = document.querySelector(`.versus__name[data-state=\"${this.move.state}\"]`);\r\n    activeName.classList.add('active');\r\n  }\r\n\r\n  addWin(state) {\r\n    const winner = document.querySelector(`.versus__name[data-state=\"${state}\"]`).previousElementSibling;\r\n    const wins = winner.getAttribute('data-wins');\r\n\r\n    if (wins) {\r\n      winner.setAttribute('data-wins', +wins + 1);\r\n    } else {\r\n      winner.setAttribute('data-wins', 1);\r\n    }\r\n  }\r\n}\r\n\r\nconst tictactoe = new Game('red');\r\n\r\n/* harmony default export */ const game = ((/* unused pure expression or super */ null && (tictactoe)));\r\n\n;// CONCATENATED MODULE: ./src/js/index.js\n\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///577\n")}},__webpack_exports__={};__webpack_modules__[577]()})();